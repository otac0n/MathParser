@namespace MathParser
@classname Parser
@using System.Numerics
@using System.Linq.Expressions
@members
{
    private static Expression ConvertIfLower(Expression expression, Expression to)
    {
        return ConvertIfLower(expression, to: to.Type);
    }

    private static Expression ConvertIfLower(Expression expression, Type to)
    {
        var from = expression.Type;
        if (to == typeof(Complex) && from != typeof(Complex))
        {
            return Expression.Convert(expression, to);
        }

        return expression;
    }

    private static Expression Pow(Expression @base, Expression exponent)
    {
        @base = ConvertIfLower(@base, to: exponent);
        if (@base.Type == typeof(double))
        {
            return Expression.Power(@base, exponent);
        }
        else
        {
            return Expression.Call(typeof(Complex).GetMethod("Pow", new[] { @base.Type, exponent.Type }), @base, exponent);
        }
    }

    private static void CreateVariable(Cursor state, string variable)
    {
        var existing = state[variable] as Expression;
        if (existing == null)
        {
            state[variable] = Expression.Parameter(typeof(Complex), variable);
        }
    }
}

math <Expression>
  = _ value:additive _ EOF { value }

additive <Expression> -memoize
    = left:additive _ "+" _ right:multiplicative { Expression.Add(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / left:additive _ "-" _ right:multiplicative { Expression.Subtract(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / multiplicative

multiplicative <Expression> -memoize
    = left:multiplicative _ ("*" / "×" / "·" / ![-+]) _ right:negation { Expression.Multiply(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / left:multiplicative _ ("/" / "÷") _ right:negation { Expression.Divide(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / negation

negation <Expression>
    = "-" _ negation:negation { Expression.Negate(negation) }
    / "+" _ negation:negation { negation }
    / power

power <Expression> -memoize
    = left:primary _ "^" _ right:power { Pow(left, right) }
    / primary

primary <Expression> -memoize
    = decimal
    / namedConstant
    / variable
    / "(" _ additive:additive _ ")" { additive }

decimal <Expression>
    = value:([0-9]+ ("." [0-9]+)?) { Expression.Constant(double.Parse(value)) }

namedConstant <Expression>
    = "τ" { Expression.Constant(2 * Math.PI) }
    / "π" { Expression.Constant(Math.PI) }
    / "e" { Expression.Constant(Math.E) }
    / "φ" { Expression.Constant((1 + Math.Sqrt(5)) / 2) }
    / "∞" { Expression.Constant(double.PositiveInfinity) }
    / "i" { Expression.Constant(Complex.ImaginaryOne) }

variable <Expression>
    = v:[a-z]i #{ CreateVariable(state, v); } { (Expression)state[v] }

_ = [ \t\r\n]*

EOF
  = !.
  / unexpected:. #error{ "Unexpected character '" + unexpected + "'." }
