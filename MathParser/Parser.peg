@namespace MathParser
@classname Parser
@using System.Linq
@using System.Linq.Expressions
@using System.Numerics
@members
{
    private static void CreateVariable(Cursor state, string variable)
    {
        var existing = state[variable] as Expression;
        if (existing == null)
        {
            state[variable] = Expression.Parameter(typeof(Complex), variable);
        }
    }
}

math <Expression>
  = _ value:statement _ EOF { value }

statement <Expression>
  = lambda
  / disjunction
  / additive

lambda <LambdaExpression>
  = "D(" _ lambda:lambda _ ")" { Operations.Derivative(lambda) }
  / name:identifier _ names:nameTuple _ ("==" / "=" / ":=") _ body:additive #{ foreach(var p in names) CreateVariable(state, p); } { Expression.Lambda(body, name, names.Select(p => (ParameterExpression)state[p])) }

nameTuple <IList<string>>
  = "(" _ names:identifier<1,,_ "," _> _ ")" { names }

disjunction <Expression> -memoize
  = left:disjunction _ ("||" / "|" / "∨" / "or") _ right:conjunction { Operations.Or(left, right) }
  / conjunction

conjunction <Expression> -memoize
  = left:conjunction _ ("&&" / "&" / "∧" / "and") _ right:conjunctionRest { Operations.And(left, right) }
  / conjunctionRest

conjunctionRest
  = complement
  / equality

complement <Expression>
  =  ("not" / "!" / "¬") _ complement:complement { Operations.Not(complement) }
  / atomic

atomic <Expression>
  = [Tt] "rue" { Expression.Constant(true) }
  / [Ff] "alse" { Expression.Constant(false) }
  / "(" _ disjunction:disjunction _ ")" { disjunction }

equality <Expression>
  = left:additive _ op:equalityOperator _ right:additive { Operations.Compare(left, op, right) }

equalityOperator <ExpressionType>
  = ("==" / "=" / ":=")        { ExpressionType.Equal }
  / ("!=" / "~=" / "<>" / "≠") { ExpressionType.NotEqual }
  / (">=" / "≥")               { ExpressionType.GreaterThanOrEqual }
  / ">"                        { ExpressionType.GreaterThan }
  / ("<=" / "≤")               { ExpressionType.LessThanOrEqual }
  / "<"                        { ExpressionType.LessThan }

additive <Expression> -memoize
    = left:additive _ "+" _ right:multiplicative { Operations.Add(left, right) }
    / left:additive _ "-" _ right:multiplicative { Operations.Subtract(left, right) }
    / multiplicative

multiplicative <Expression> -memoize
    = left:multiplicative _ ("*" / "×" / "·" / ![-+|]) _ right:negation { Operations.Multiply(left, right) }
    / left:multiplicative _ ("/" / "∕" / "÷") _ right:negation { Operations.Divide(left, right) }
    / negation

negation <Expression>
    = "-" _ negation:negation { Operations.Negate(negation) }
    / "+" _ negation:negation { negation }
    / power

negationPrimary <Expression>
    = "-" _ negation:negationPrimary { Operations.Negate(negation) }
    / "+" _ negation:negationPrimary { negation }
    / primary

power <Expression> -memoize
    = left:primary _ "^" _ right:negation { Operations.Pow(left, right) }
    / primary

primary <Expression> -memoize
    = decimal
    / namedConstant
    / "iif(" _ condition:disjunction _ "," _ consequent:additive _ "," _ alternative:additive _ ")" { Operations.Conditional(condition, consequent, alternative) }
    / name:identifier "(" _ arguments:additive<0,,_ "," _> _ ")" { Operations.Function(name, arguments) }
    / variable
    / "√" _ negation:negationPrimary { Operations.Sqrt(negation) }
    / "(" _ additive:additive _ ")" { additive }
    / "|" _ additive:additive _ "|" { Operations.Abs(additive) }
    / "⌈" _ additive:additive _ "⌉" { Operations.Ceiling(additive) }
    / "⌊" _ additive:additive _ "⌋" { Operations.Floor(additive) }

decimal <Expression>
    = value:([0-9]+ ("." [0-9]+)?) { Expression.Constant(double.Parse(value)) }

namedConstant <Expression>
    = "τ" { Expression.Constant(Math.Tau) }
    / "π" { Expression.Constant(Math.PI) }
    / "e" ![_a-z0-9]i { Expression.Constant(Math.E) }
    / "φ" { Expression.Constant((1 + Math.Sqrt(5)) / 2) }
    / "∞" { Expression.Constant(double.PositiveInfinity) }
    / "i" ![_a-z0-9]i { Expression.Constant(Complex.ImaginaryOne) }

variable <Expression>
    = name:identifier #{ CreateVariable(state, name); } { (Expression)state[name] }

identifier
    = !keyword [_a-z]i [_a-z0-9]i*

keyword
    = [Tt] "rue"
    / [Ff] "alse"
    / "and"
    / "or"
    / "not"

_ = [ \t\r\n]*

EOF
  = !.
  / unexpected:. #error{ "Unexpected character '" + unexpected + "'." }
