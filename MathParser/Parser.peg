@namespace MathParser
@classname Parser
@using System.Linq
@using System.Linq.Expressions
@using System.Numerics

math <Expression>
  = _ value:statement _ EOF { value }

statement <Expression>
  = lambda
  / equality
  / additive

lambda <Expression>
  = name:identifier _ names:nameTuple _ ("==" / "=" / ":=") _ body:additive #{ foreach(var p in names) CreateVariable(state, p); } { Expression.Lambda(body, name, names.Select(p => (ParameterExpression)state[p])) }

nameTuple <IList<string>>
  = "(" _ names:identifier<1,,_ "," _> _ ")" { names }

equality <Expression>
  = left:additive _ op:equalityOperator _ right:additive {
    op == ExpressionType.Equal || op == ExpressionType.NotEqual
      ? Expression.MakeBinary(op, ConvertIfLower(left, to: right), ConvertIfLower(right, to: left))
      : Expression.MakeBinary(op, LowerToReal(left), LowerToReal(right))
  }

equalityOperator <ExpressionType>
  = ("==" / "=" / ":=")        { ExpressionType.Equal }
  / ("!=" / "~=" / "<>" / "≠") { ExpressionType.NotEqual }
  / (">=" / "≥")               { ExpressionType.GreaterThanOrEqual }
  / ">"                        { ExpressionType.GreaterThan }
  / ("<=" / "≤")               { ExpressionType.LessThanOrEqual }
  / "<"                        { ExpressionType.LessThan }

additive <Expression> -memoize
    = left:additive _ "+" _ right:multiplicative { Expression.Add(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / left:additive _ "-" _ right:multiplicative { Expression.Subtract(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / multiplicative

multiplicative <Expression> -memoize
    = left:multiplicative _ ("*" / "×" / "·" / ![-+|]) _ right:negation { Expression.Multiply(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / left:multiplicative _ ("/" / "∕" / "÷") _ right:negation { Expression.Divide(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / negation

negation <Expression>
    = "-" _ negation:negation { Expression.Negate(negation) }
    / "+" _ negation:negation { negation }
    / power

negationPrimary <Expression>
    = "-" _ negation:negationPrimary { Expression.Negate(negation) }
    / "+" _ negation:negationPrimary { negation }
    / primary

power <Expression> -memoize
    = left:primary _ "^" _ right:negation { Pow(left, right) }
    / primary

primary <Expression> -memoize
    = decimal
    / namedConstant
    / name:identifier "(" _ arguments:additive<0,,_ "," _> _ ")" { Function(name, arguments) }
    / variable
    / "√" _ negation:negationPrimary { Sqrt(negation) }
    / "(" _ additive:additive _ ")" { additive }
    / "|" _ additive:additive _ "|" { Abs(additive) }
    / "⌈" _ additive:additive _ "⌉" { Ceiling(additive) }
    / "⌊" _ additive:additive _ "⌋" { Floor(additive) }

decimal <Expression>
    = value:([0-9]+ ("." [0-9]+)?) { Expression.Constant(double.Parse(value)) }

namedConstant <Expression>
    = "τ" { Expression.Constant(Math.Tau) }
    / "π" { Expression.Constant(Math.PI) }
    / "e" ![_a-z0-9]i { Expression.Constant(Math.E) }
    / "φ" { Expression.Constant((1 + Math.Sqrt(5)) / 2) }
    / "∞" { Expression.Constant(double.PositiveInfinity) }
    / "i" ![_a-z0-9]i { Expression.Constant(Complex.ImaginaryOne) }

variable <Expression>
    = name:identifier #{ CreateVariable(state, name); } { (Expression)state[name] }

identifier
    = [_a-z]i [_a-z0-9]i*

_ = [ \t\r\n]*

EOF
  = !.
  / unexpected:. #error{ "Unexpected character '" + unexpected + "'." }
