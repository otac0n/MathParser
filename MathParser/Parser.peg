@namespace MathParser
@classname Parser
@using System.Linq
@using System.Linq.Expressions
@using System.Numerics
@using System.Reflection
@members
{
    private static Expression ConvertIfLower(Expression expression, Expression to)
    {
        return ConvertIfLower(expression, to: to.Type);
    }

    private static Expression ConvertIfLower(Expression expression, Type to)
    {
        var from = expression.Type;
        if (to == typeof(Complex) && from != typeof(Complex))
        {
            return Expression.Convert(expression, to);
        }

        return expression;
    }

    private static Expression Pow(Expression @base, Expression exponent)
    {
        @base = ConvertIfLower(@base, to: typeof(Complex));
        return Expression.Call(typeof(Complex).GetMethod(nameof(Complex.Pow), new[] { @base.Type, exponent.Type }), @base, exponent);
    }

    private static Expression Sqrt(Expression @base)
    {
        @base = ConvertIfLower(@base, to: typeof(Complex));
        return Expression.Call(typeof(Complex).GetMethod(nameof(Complex.Sqrt), new[] { @base.Type }), @base);
    }

    private static Expression Function(string name, IList<Expression> arguments)
    {
        Expression[] mappedArguments;
        var found = FindFunction(typeof(Complex), name, arguments.Select(a => a.Type).ToArray());
        if (found == null)
        {
            found = FindFunction(typeof(Complex), name, arguments.Select(_ => typeof(Complex)).ToArray());
            if (found == null)
            {
                throw new MissingMethodException(typeof(Complex).FullName, name + "(" + string.Join(", ", arguments.Select(a => a.Type.FullName)) + ")");
            }
            else
            {
                mappedArguments = arguments.Select(a => ConvertIfLower(a, to: typeof(Complex))).ToArray();
            }
        }
        else
        {
            mappedArguments = arguments.ToArray();
        }

        return Expression.Call(found, mappedArguments);
    }

    private static MethodInfo FindFunction(Type type, string name, Type[] argTypes)
    {
        return (from m in type.GetMethods(BindingFlags.Public | BindingFlags.Static)
                where m.DeclaringType == type
                where m.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase)
                let parameters = m.GetParameters()
                where parameters.Length == argTypes.Length
                where Enumerable.Range(0, argTypes.Length).All(i => parameters[i].ParameterType.IsAssignableFrom(argTypes[i]))
                select m).FirstOrDefault();
    }

    private static void CreateVariable(Cursor state, string variable)
    {
        var existing = state[variable] as Expression;
        if (existing == null)
        {
            state[variable] = Expression.Parameter(typeof(Complex), variable);
        }
    }
}

math <Expression>
  = _ value:additive _ EOF { value }

additive <Expression> -memoize
    = left:additive _ "+" _ right:multiplicative { Expression.Add(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / left:additive _ "-" _ right:multiplicative { Expression.Subtract(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / multiplicative

multiplicative <Expression> -memoize
    = left:multiplicative _ ("*" / "×" / "·" / ![-+]) _ right:negation { Expression.Multiply(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / left:multiplicative _ ("/" / "∕" / "÷") _ right:negation { Expression.Divide(ConvertIfLower(left, to: right), ConvertIfLower(right, to: left)) }
    / negation

negation <Expression>
    = "-" _ negation:negation { Expression.Negate(negation) }
    / "+" _ negation:negation { negation }
    / power

negationPrimary <Expression>
    = "-" _ negation:negationPrimary { Expression.Negate(negation) }
    / "+" _ negation:negationPrimary { negation }
    / primary

power <Expression> -memoize
    = left:primary _ "^" _ right:negation { Pow(left, right) }
    / primary

primary <Expression> -memoize
    = decimal
    / namedConstant
    / name:identifier "(" _ arguments:additive<0,,_ "," _> _ ")" { Function(name, arguments) }
    / variable
    / "√" _ negation:negationPrimary { Sqrt(negation) }
    / "(" _ additive:additive _ ")" { additive }


decimal <Expression>
    = value:([0-9]+ ("." [0-9]+)?) { Expression.Constant(double.Parse(value)) }

namedConstant <Expression>
    = "τ" { Expression.Constant(2 * Math.PI) }
    / "π" { Expression.Constant(Math.PI) }
    / "e" ![_a-z0-9]i { Expression.Constant(Math.E) }
    / "φ" { Expression.Constant((1 + Math.Sqrt(5)) / 2) }
    / "∞" { Expression.Constant(double.PositiveInfinity) }
    / "i" ![_a-z0-9]i { Expression.Constant(Complex.ImaginaryOne) }

variable <Expression>
    = name:identifier #{ CreateVariable(state, name); } { (Expression)state[name] }

identifier
    = [_a-z]i [_a-z0-9]i*

_ = [ \t\r\n]*

EOF
  = !.
  / unexpected:. #error{ "Unexpected character '" + unexpected + "'." }
