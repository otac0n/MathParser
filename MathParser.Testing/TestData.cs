// Copyright © John Gietzen. All Rights Reserved. This source is subject to the MIT license. Please see license.md for more information.

namespace MathParser.Testing
{
    using System;
    using System.Linq.Expressions;
    using System.Numerics;

    public static class TestData
    {
        public static Expression<Func<Complex>>[] ComplexExpressions =>
        [
            () => new Complex(1, 3) / 4,
            () => new Complex(1, 0) / 4,
            () => new Complex(0, 3) / 4,
            () => new Complex(-2, 3) / 4,
            () => new Complex(-2, -3) / 4,
            () => new Complex(-2, 0) / 4,
            () => new Complex(0, -2) / 4,
            () => new Complex(1, 3) * 4,
            () => new Complex(1, 0) * 4,
            () => new Complex(0, 3) * 4,
            () => new Complex(-2, 3) * 4,
            () => new Complex(-2, -3) * 4,
            () => new Complex(-2, 0) * 4,
            () => new Complex(0, -2) * 4,
            () => new Complex(1, 3) + 4,
            () => new Complex(1, 0) + 4,
            () => new Complex(0, 3) + 4,
            () => new Complex(-2, 3) + 4,
            () => new Complex(-2, -3) + 4,
            () => new Complex(-2, 0) + 4,
            () => new Complex(0, -2) + 4,
            () => new Complex(1, 3) - 4,
            () => new Complex(1, 0) - 4,
            () => new Complex(0, 3) - 4,
            () => new Complex(-2, 3) - 4,
            () => new Complex(-2, -3) - 4,
            () => new Complex(-2, 0) - 4,
            () => new Complex(0, -2) - 4,
            () => Complex.Pow(new Complex(1, 3), 4),
            () => Complex.Pow(new Complex(1, 0), 4),
            () => Complex.Pow(new Complex(0, 3), 4),
            () => Complex.Pow(new Complex(-2, 3), 4),
            () => Complex.Pow(new Complex(-2, -3), 4),
            () => Complex.Pow(new Complex(-2, 0), 4),
            () => Complex.Pow(new Complex(0, -2), 4),
            () => Complex.Pow(1, Complex.Pow(Complex.ImaginaryOne, 3)),
            () => Complex.Pow(-1, -1 * 2),
            () => Complex.Pow(5, Complex.Divide((Complex)1, (Complex)2)),
            () => Complex.Pow(5, Complex.ImaginaryOne * 2),
            () => Complex.Pow(-1, 0.5).Real,
        ];

        public static string[] ExpressionStrings =>
        [
            "τ+π",
            "i",
            "e",
            "φ",
            "∞",
            "sin(x)",
            "COS(x)",
            "Atan(x)",
            "pOw(x,y)",
            "a (x)",
            "1.1",
            "10/2",
            "(((((((1+1)^2)^3)^4)^5)^6)^7)^8",
            "3*5",
            "1+1",
            "2^5",
            "2^2^2^2",
            "3-8",
            "(1+2^3^4)^(5*(6+7))",
            "((1+2)^(3+4))^5",
            "(1+2)*(3+4)",
            "1+2÷(2*4)",
            "8-(5+2)",
            "8+(5+2)",
            "(8+5)+2",
            "8-5-2",
            "(-2)^2",
            "-(2^2)",
            "(√1)^2",
            "√(1^2)",
            "√-1",
            "√Sqrt(√2)",
            "√(1+2)",
            "√(1*2)",
            "√(1*2)^√3*4",
            "√(1*2)+√3*4",
            "√(1*2)^√3*4",
            "((1+2)+(3+4))",
            "(((1+2)+3)+4)",
            "(1+(2+(3+4)))",
            "((1+(2+3))+4)",
            "(1+((2+3)+4))",
            "((1*2)*(3*4))",
            "(((1*2)*3)*4)",
            "(1*(2*(3*4)))",
            "((1*(2*3))*4)",
            "(1*((2*3)*4))",
            "((1÷2)÷(3÷4))",
            "(((1÷2)÷3)÷4)",
            "(1÷(2÷(3÷4)))",
            "((1÷(2÷3))÷4)",
            "(1÷((2÷3)÷4))",
            "((1-2)-(3-4))",
            "(((1-2)-3)-4)",
            "(1-(2-(3-4)))",
            "((1-(2-3))-4)",
            "(1-((2-3)-4))",
            "((1^2)^(3^4))",
            "(((1^2)^3)^4)",
            "(1^(2^(3^4)))",
            "((1^(2^3))^4)",
            "(1^((2^3)^4))",
            "e^(iτ)-1",
            "√(1+√√√2+3/4+√(1/3)+√(i^2))",
            "m·v/√(1-v^2/c^2)",
            "1/sqrt(τ)e^-(x^2/2)",
            "4v^2/√π(m/(2k T))^(3/2)e^-(m v^2/(2 k T))",
            "((1+i)/(1-i))^3-((1-i)/(1+i))^3",
            "⌈3⌉/⌊2⌋",
            "f(x)=1/x",
            "g(x):=sin(x)*x",
            "y==log(z)",
            "a>b",
            "π≥3",
            "e>=1",
            "x*y<x+y",
            "√(x^2+b^2)≤2",
            "cos(τ)<=sin(x)",
            "1≠2",
        ];

        public static string[] SimplifyStrings =>
        [
            "0*x",
            "x*0",
            "1*x",
            "x*1",
            "0+x",
            "x+0",
            "x*x",
            "x^2*x",
            "x*x^2",
            "x^2/x",
            "x/x^2",
            "x/x",
        ];
    }
}
