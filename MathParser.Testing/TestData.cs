// Copyright © John Gietzen. All Rights Reserved. This source is subject to the MIT license. Please see license.md for more information.

namespace MathParser.Testing
{
    using System;
    using System.Linq.Expressions;
    using System.Numerics;

    public static class TestData
    {
        public static Expression[] NaNExpressions =
        [
            Expression.Constant(float.NaN),
            Expression.Constant(double.NaN),
            Expression.Constant(Complex.NaN),
            Expression.Constant(new Complex(double.NaN, 0)),
            Expression.Constant(new Complex(0, double.NaN)),
        ];

        public static Expression<Func<double, double>>[] LambdaExpressions =>
        [
            x => 2,
            x => x,
            x => 2 * x,
            x => Math.Pow(x, 2),
            x => x * x,
            x => Math.Exp(2 * Math.Log(x)),
            x => Math.Sqrt(x),
            x => Math.Pow(x, 0.5),
            x => Math.Abs(x),
            x => Math.Sqrt(Math.Pow(x, 2)),
            x => Math.Exp(x),
            x => Math.Pow(Math.E, x),
            x => Math.Log(x),
            x => Math.Sin(x),
            x => Math.Cos(x),
            x => Math.Tan(x),
            x => Math.Cosh(x),
            x => Math.Sinh(x),
            x => Math.Tanh(x),
            x => Math.Asin(x),
            x => Math.Acos(x),
            x => Math.Atan(x),
            x => Math.Asinh(x),
            x => Math.Acosh(x),
            x => Math.Atanh(x),
            x => Math.Sin(x) * x,
            x => Math.Sin(Math.Pow(x, 2)),
            x => Math.Cos(Math.Pow(x, 2)) * x,
            x => Math.Exp(2 * x),
            x => Math.Pow(Math.Log(x), Math.E),
            x => Math.Pow(x, 1 / x),
            x => Math.Exp(-Math.Pow(x, 2) / 2) / Math.Tau,
            x => 1 / (1 + Math.Exp(-x)),
        ];

        public static Expression<Func<Complex>>[] ComplexExpressions =>
        [
            () => new Complex(1, 3) / 4,
            () => new Complex(1, 0) / 4,
            () => new Complex(0, 3) / 4,
            () => new Complex(-2, 3) / 4,
            () => new Complex(-2, -3) / 4,
            () => new Complex(-2, 0) / 4,
            () => new Complex(0, -2) / 4,
            () => new Complex(1, 3) * 4,
            () => new Complex(1, 0) * 4,
            () => new Complex(0, 3) * 4,
            () => new Complex(-2, 3) * 4,
            () => new Complex(-2, -3) * 4,
            () => new Complex(-2, 0) * 4,
            () => new Complex(0, -2) * 4,
            () => new Complex(1, 3) + 4,
            () => new Complex(1, 0) + 4,
            () => new Complex(0, 3) + 4,
            () => new Complex(-2, 3) + 4,
            () => new Complex(-2, -3) + 4,
            () => new Complex(-2, 0) + 4,
            () => new Complex(0, -2) + 4,
            () => new Complex(1, 3) - 4,
            () => new Complex(1, 0) - 4,
            () => new Complex(0, 3) - 4,
            () => new Complex(-2, 3) - 4,
            () => new Complex(-2, -3) - 4,
            () => new Complex(-2, 0) - 4,
            () => new Complex(0, -2) - 4,
            () => Complex.Pow(new Complex(1, 3), 4),
            () => Complex.Pow(new Complex(1, 0), 4),
            () => Complex.Pow(new Complex(0, 3), 4),
            () => Complex.Pow(new Complex(-2, 3), 4),
            () => Complex.Pow(new Complex(-2, -3), 4),
            () => Complex.Pow(new Complex(-2, 0), 4),
            () => Complex.Pow(new Complex(0, -2), 4),
            () => Complex.Pow(1, Complex.Pow(Complex.ImaginaryOne, 3)),
            () => Complex.Pow(-1, -1 * 2),
            () => Complex.Pow(5, Complex.Divide((Complex)1, (Complex)2)),
            () => Complex.Pow(5, Complex.ImaginaryOne * 2),
            () => Complex.Pow(-1, 0.5).Real,
            () => Complex.Reciprocal(Complex.One + Complex.One),
        ];

        public static LambdaExpression[] VectorExpressions =>
        [
            () => default(Vector2),
            () => new Vector2(),
            () => new Vector2(0, 1),
            (float x) => new Vector2(x),
            (float x) => Vector2.Create(x),
            () => Vector2.Create(0, 1),
            () => Vector2.NegativeInfinity,
            () => Vector2.PositiveInfinity,
            () => default(Vector3),
            () => new Vector3(),
            () => new Vector3(0, 1, 2),
            (float x) => new Vector3(x),
            (float x) => Vector3.Create(x),
            () => Vector3.Create(0, 1, 2),
            () => Vector3.NegativeInfinity,
            () => Vector3.PositiveInfinity,
            () => default(Vector4),
            () => new Vector4(),
            () => new Vector4(0, 1, 2, 3),
            (float x) => new Vector4(x),
            (float x) => Vector4.Create(x),
            () => Vector4.Create(0, 1, 2, 3),
            () => Vector4.NegativeInfinity,
            () => Vector4.PositiveInfinity,
        ];

        public static LambdaExpression[] MatrixExpressions =>
        [
            () => Matrix3x2.Identity,
            () => new Matrix3x2(0, 1, 2, 3, 4, 5),
            () => Matrix4x4.Identity,
            () => new Matrix4x4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        ];

        public static string[] ExpressionStrings =>
        [
            "τ+π",
            "i",
            "e",
            "φ",
            "∞",
            "sin(x)",
            "COS(x)",
            "Atan(x)",
            "pOw(x,y)",
            "a (x)",
            "1.1",
            "10/2",
            "(((((((1+1)^2)^3)^4)^5)^6)^7)^8",
            "(((((((1+1)²)³)⁴)⁵)⁶)⁷)⁸",
            "3*5",
            "1+1",
            "a¹⁺¹",
            "0^0",
            "0⁰",
            "2^5",
            "2⁵",
            "1¹²³⁴⁵⁶⁷⁸⁹⁰",
            "2^2^2^2",
            "2² ² ²",
            "2²^2²",
            "e^-1",
            "e⁻¹",
            "3-8",
            "a³⁻⁸",
            "(1+2^3^4)^(5*(6+7))",
            "((1+2)^(3+4))^5",
            "(1+2)*(3+4)",
            "1+2÷(2*4)",
            "8-(5+2)",
            "a⁸⁻⁽⁵⁺²⁾",
            "8+(5+2)",
            "a⁸⁺⁽⁵⁺²⁾",
            "(8+5)+2",
            "8-5-2",
            "2 * x / 3 * x",
            "2x / 3x",
            "2x/3 x",
            "2x/3x",
            "(-2)^2",
            "(-2)²",
            "-(2^2)",
            "-(2²)",
            "-2^2",
            "-2²",
            "(√1)^2",
            "(√1)²",
            "√(1^2)",
            "√(1²)",
            "√1^2",
            "√1²",
            "√-1",
            "√-2^2",
            "√Sqrt(√2)",
            "√(1+2)",
            "√(1*2)",
            "√(1*2)^√3*4",
            "√(1*2)+√3*4",
            "√(1*2)^√3*4",
            "((1+2)+(3+4))",
            "(((1+2)+3)+4)",
            "(1+(2+(3+4)))",
            "((1+(2+3))+4)",
            "(1+((2+3)+4))",
            "((1*2)*(3*4))",
            "(((1*2)*3)*4)",
            "(1*(2*(3*4)))",
            "((1*(2*3))*4)",
            "(1*((2*3)*4))",
            "((1÷2)÷(3÷4))",
            "(((1÷2)÷3)÷4)",
            "(1÷(2÷(3÷4)))",
            "((1÷(2÷3))÷4)",
            "(1÷((2÷3)÷4))",
            "((1-2)-(3-4))",
            "(((1-2)-3)-4)",
            "(1-(2-(3-4)))",
            "((1-(2-3))-4)",
            "(1-((2-3)-4))",
            "((1^2)^(3^4))",
            "(((1^2)^3)^4)",
            "(1^(2^(3^4)))",
            "((1^(2^3))^4)",
            "(1^((2^3)^4))",
            "a⁽⁽¹⁺²⁾⁺⁽³⁺⁴⁾⁾",
            "a⁽⁽⁽¹⁺²⁾⁺³⁾⁺⁴⁾",
            "a⁽¹⁺⁽²⁺⁽³⁺⁴⁾⁾⁾",
            "a⁽⁽¹⁺⁽²⁺³⁾⁾⁺⁴⁾",
            "a⁽¹⁺⁽⁽²⁺³⁾⁺⁴⁾⁾",
            "a⁽⁽¹⁻²⁾⁻⁽³⁻⁴⁾⁾",
            "a⁽⁽⁽¹⁻²⁾⁻³⁾⁻⁴⁾",
            "a⁽¹⁻⁽²⁻⁽³⁻⁴⁾⁾⁾",
            "a⁽⁽¹⁻⁽²⁻³⁾⁾⁻⁴⁾",
            "a⁽¹⁻⁽⁽²⁻³⁾⁻⁴⁾⁾",
            "e^(iτ)-1",
            "√(1+√√√2+3/4+√(1/3)+√(i^2))",
            "m·v/√(1-v^2/c^2)",
            "1/sqrt(τ)e^-(x^2/2)",
            "4v^2/√π(m/(2k T))^(3/2)e^-(m v^2/(2 k T))",
            "((1+i)/(1-i))^3-((1-i)/(1+i))^3",
            "⌈3⌉/⌊2⌋",
            "f(x)=1/x",
            "g(x):=sin(x)*x",
            "y==log(z)",
            "a>b",
            "π≥3",
            "e>=1",
            "x*y<x+y",
            "√(x^2+b^2)≤2",
            "√(x²+b²)≤2",
            "cos(τ)<=sin(x)",
            "true",
            "false",
            "!false",
            "¬true",
            "¬true or true and true",
            "¬true and true or true",
            "true or ¬true and true",
            "true and ¬true or true",
            "¬true and (true or true)",
            "true and (¬true or true)",
            "true and ¬(true or true)",
            "x=0&y=0",
            "x=0&&y=0",
            "x=0∧y=0",
            "x=0 and y=0",
            "x=0|y=0",
            "x=0||y=0",
            "x=0∨y=0",
            "x=0 or y=0",
            "1≠2",
            "3*|x|^|y|+5",
            "e^|a|",
            "|a|^2",
            "|a|²",
            "e^(|y|*|z|)",
            "exp(|y|+|z|)",
            "(|a|+|b|)+5",
            "(|a|+|b|)*5",
            "10+(|a|+|b|)",
            "10*(|a|+|b|)",
            "abs(a)",
            "abs(abs(b)-5)",
            "abs(5-abs(b))",
            "abs(x)^abs(y)",
            "D(f(x)=2x)",
            "iif(x!=0,1/x,0)",
            "1/(x*iif(a>b,a,b))/2",
            "f(x)=iif(x<=-3,-3-x,iif(x<=0,x+3,iif(x<=3,3-2x,0.5x-4.5)))",
            "f(x)=1; x!=0",
            "f(x)=(x; x!=0)*x",
            "f(x)=iif(x!=0, x, 0)*x",
            "f(x)=2*(x; x!=0)*x",
            "f(x)=2*iif(x!=0, x, 0)*x",
            "(x+y; x!=0); x!=0",
            "[a, b, c]",
            "[[a, b, c]]",
            "[[a, b, c][d, e, f][g, h, i]]",
        ];

        public static string[] SimplifyStrings =>
        [
            "1+0",
            "0+1",
            "1+1",
            "1+1+1",
            "0*2",
            "2*0",
            "1*2",
            "2*1",
            "2*2",
            "2*2*2",
            "-1/2",
            "-(1/2)",
            "0^0",
            "0^2",
            "2^0",
            "2^1",
            "2^2",
            "2^2^2",
            "(2^2)^2",
            "exp(0)",
            "exp(1)",
            "log(e)",
            "--a",
            "a+-b",
            "a--b",
            "-a+b",
            "-a+-b",
            "-a--b",
            "-(a+b)",
            "-(a-b)",
            "a-(b+c)",
            "a-(b-c)",
            "a+-(b-c)",
            "a+-(b+c)",
            "1+y+1+x+1",
            "2 x 2 y 2",
            "2x/(3x)",
            "2x/x^2",
            "-x-3x",
            "2/sqrt(2)",
            "0*x",
            "x*0",
            "1*x",
            "x*1",
            "0+x",
            "x+0",
            "x*x",
            "x^0",
            "0^x",
            "x^1",
            "1^x",
            "x^2*x",
            "x*x^2",
            "x^3^2",
            "(x^3)^2",
            "x^3*x^2",
            "x^2/x",
            "x/x^2",
            "x/x",
            "(0+0)+x",
            "x+(0+0)",
            "(2*2)*x",
            "x*(2*2)",
            "not true",
            "not false",
            "true or x=0",
            "true and x=0",
            "false or x=0",
            "false and x=0",
            "(x+3)(x-5)",
            "(x-1)(x+1)",
            "(x+2)(x+4)",
            "2(x+5)",
            "(x+3)2",
            "2(x-2)",
            "(x-4)2",
            "(x; x!=0)+(y; x!=0)",
            "(x; x!=0)+(2; x!=0)",
        ];
    }
}
